#!/usr/bin/env bash

#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Get current working directory
WORK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# Preserve the calling directory
CALLING_DIR="$(pwd)"
# Compilation options
COMPILATION_OPTS="-Xmx2g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m"

##############################################################################
# Downloads any file with input parameters: a remote URL, a local file path. #
#                                                                            #
# @param: remote file URL                                                    #
# @param: local file path                                                    #
##############################################################################
download() {
  local target_file="$1"
  local local_file="$2"

  # Setup `curl` and `wget` options
  local curl_opts="-L --progress-bar"
  local wget_opts="--progress=bar:force"

  # Check if we have downloaded the file
  # Check if we have curl installed
  # Download the tarball
  [ ! -f "${local_file}" ] && [ $(command -v curl) ] && \
    echo "exec: curl ${curl_opts} ${target_file}" 1>&2 && \
    curl ${curl_opts} "${target_file}" > "${local_file}"
  # If the file still doesn't exist, try `wget`
  [ ! -f "${local_file}" ] && [ $(command -v wget) ] && \
    echo "exec: wget ${wget_opts} ${target_file}" 1>&2 && \
    wget ${wget_opts} -O "${local_file}" "${target_file}"
}

##############################################################################
# Installs any tarball with input parameters: a URL, the tarball name, and, #
# optionally, a checkable binary path to determine if the binary has already #
# been installed.                                                            #
#                                                                            #
# @param: URL                                                                #
# @param: tarball name                                                       #
# @param: checkable binary                                                   #
##############################################################################
install_tarball() {
  local remote_tarball="$1/$2"
  local local_tarball="${WORK_DIR}/$2"
  local binary="${WORK_DIR}/$3"

  if [ -z "$3" -o ! -f "${binary}" ]; then
    # Download tarball
    download \
      "${remote_tarball}" \
      "${local_tarball}"
    # If both were unsuccessful, exit
    [ ! -f "${local_tarball}" ] && \
      echo -n "ERROR: Cannot download $2 with curl or wget; " && \
      echo "please download manually and try again." && \
      exit 2
    # Install tarball
    cd "${WORK_DIR}" && tar -xvf "$2"
    # Remove tarball
    rm -rf "$local_tarball"
  fi
}

# Install Thrift which version is achieved from the root pom.xml file, set the
# Thrift URL, and, with that, download the specific version of Thrift necessary
# under the build/ folder
install_thrift() {
  local THRIFT_VERSION=`grep "thrift.version" "${WORK_DIR}/../pom.xml" | \
                        head -1 | cut -f2 -d'>' | cut -f1 -d'<'`
  local THRIFT_PATH="${WORK_DIR}/thrift-${THRIFT_VERSION}"

  install_tarball \
    "http://archive.apache.org/dist/thrift/${THRIFT_VERSION}" \
    "thrift-${THRIFT_VERSION}.tar.gz" \
    "thrift-${THRIFT_VERSION}/bin/thrift"

  if [ ! -f "${THRIFT_PATH}/bin/thrift" ]; then
    cd "${THRIFT_PATH}" && ./configure \
      --prefix="${THRIFT_PATH}" \
      --with-boost="/usr" \
      --with-libevent="/usr" \
      && make && sudo make install
  fi
}

install_thrift

# Install maven under the build/ folder
install_mvn() {
  local MVN_VERSION=`grep "maven.version" "${WORK_DIR}/../pom.xml" | \
                     head -1 | cut -f2 -d'>' | cut -f1 -d'<'`

  install_tarball \
    "https://www.apache.org/dyn/closer.lua?action=download&filename=/maven/maven-3/${MVN_VERSION}/binaries" \
    "apache-maven-${MVN_VERSION}-bin.tar.gz" \
    "apache-maven-${MVN_VERSION}/bin/mvn"

  MVN_BIN="${WORK_DIR}/apache-maven-${MVN_VERSION}/bin/mvn"
}

# Check for the `--force` flag dictating that `mvn` should be downloaded
# regardless of whether the system already has a `mvn` install
if [ "$1" == "--force" ]; then
  FORCE_MVN=1
  shift
fi

# Install Maven if necessary
MVN_BIN="$(command -v mvn)"

if [ ! "$MVN_BIN" -o -n "$FORCE_MVN" ]; then
  install_mvn
fi

# Install Scala which version is achieved from the root pom.xml file, set the
# Scala URL, and, with that, download the specific version of Scala necessary
# under the build/ folder
install_scala() {
  local SCALA_VERSION=`grep "scala.version" "${WORK_DIR}/../pom.xml" | \
                       head -1 | cut -f2 -d'>' | cut -f1 -d'<'`
  local SCALA_BIN="${WORK_DIR}/scala-${SCALA_VERSION}/bin/scala"

  install_tarball \
    "http://downloads.typesafe.com/scala/${SCALA_VERSION}" \
    "scala-${SCALA_VERSION}.tgz" \
    "scala-${SCALA_VERSION}/bin/scala"

  SCALA_COMPILER="$( cd "$( dirname "${SCALA_BIN}" )/../lib" && pwd )/scala-compiler.jar"
  SCALA_LIBRARY="$( cd "$(dirname "${SCALA_BIN}" )/../lib" && pwd )/scala-library.jar"
}

install_scala

# Install zinc under the build/ folder
install_zinc() {
  local ZINC_VERSION="0.3.5.3"
  local ZINC_PATH="zinc-${ZINC_VERSION}/bin/zinc"

  [ ! -f "${WORK_DIR}/${ZINC_PATH}" ] && ZINC_INSTALL_FLAG=1

  install_tarball \
    "http://downloads.typesafe.com/zinc/${ZINC_VERSION}" \
    "zinc-${ZINC_VERSION}.tgz" \
    "${ZINC_PATH}"

  ZINC_BIN="${WORK_DIR}/${ZINC_PATH}"
}

# Setup healthy defaults for the Zinc port if none were provided
ZINC_PORT=${ZINC_PORT:-"3030"}

install_zinc

# Reset the current working directory
cd "${CALLING_DIR}"

# Now that zinc is ensured to be installed, check its status and, if it's just
# installed or not running, start it
if [ -n "${ZINC_INSTALL_FLAG}" -o -z "`"${ZINC_BIN}" -status -port ${ZINC_PORT}`" ]; then
  export ZINC_OPTS=${ZINC_OPTS:-"$COMPILATION_OPTS"}
  "${ZINC_BIN}" -shutdown -port ${ZINC_PORT}
  "${ZINC_BIN}" -start -port ${ZINC_PORT} \
    -scala-compiler "${SCALA_COMPILER}" \
    -scala-library "${SCALA_LIBRARY}" &>/dev/null
fi

# Set any `mvn` options if not already present
export MAVEN_OPTS=${MAVEN_OPTS:-"$COMPILATION_OPTS"}

echo "Using \`mvn\` from path: $MVN_BIN" 1>&2

# Last, call the `mvn` command as usual
${MVN_BIN} -DzincPort=${ZINC_PORT} "$@"
