/*
 * Copyright 2017 The Tsinghua University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package tsinghua.stargate.rpc;

import java.io.Closeable;
import java.io.IOException;
import java.lang.reflect.InvocationHandler;
import java.net.InetSocketAddress;

import javax.net.SocketFactory;

import tsinghua.stargate.conf.Configuration;
import tsinghua.stargate.rpc.workhorse.ProtocolProxy;
import tsinghua.stargate.rpc.workhorse.RpcClient;
import tsinghua.stargate.rpc.workhorse.RpcServer;

/** A common interface for different protocol engines. */
public interface RpcEngine {

  /**
   * Construct a client-side protocol proxy object.
   *
   * @param protocol a Java interface used for exchanging information between
   *          RPC Client (i.e. <code>Client</code>) and RPC Server (i.e.
   *          <code>StarGateDaemon</code>)
   * @param clientVersion the current version of client
   * @param address the <code>StarGateDaemon</code> location
   * @param conf a configuration profiler
   * @param factory a factory for creating sockets
   * @param rpcTimeout timeout value for each RPC, 0 means no timeout
   * @param <T> protocol type
   * @return a <code>ProtocolProxy</code> instance
   * @throws IOException if some I/O errors occur
   */
  <T> ProtocolProxy<T> getProxy(Class<T> protocol, long clientVersion,
      InetSocketAddress address, Configuration conf, SocketFactory factory,
      int rpcTimeout) throws IOException;

  /**
   * Construct a RPC Server proxy.
   *
   * @param conf configuration profiler
   * @param address server socket address for binding
   * @param ioQueueSize queue size for per IO thread
   * @param ioThreads number of IO threads
   * @param workerThreads number of worker threads
   * @param protocol protocol that is auto generated by a specific RPC engine
   * @param processor processor for handling {@code protocol} that is auto
   *          generated by a specific RPC engine
   * @return a RPC Server proxy
   */
  RpcServer getServer(Configuration conf, InetSocketAddress address,
      int ioQueueSize, int ioThreads, int workerThreads, Class<?> protocol,
      Object processor);

  /**
   * This interface must be implemented by all StarGate RPC
   * <code>InvocationHandler</code>.
   */
  interface RpcDynamicProxyHandler extends InvocationHandler, Closeable {

    /**
     * Return the <code>ConnectionId</code> associated with the
     * <code>InvocationHandler</code> instance.
     *
     * @return a <code>ConnectionId</code>
     */
    RpcClient.ConnectionId getConnectionId();
  }
}
